# -*- coding: utf-8 -*-
"""CODIGO TALLER 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g04D7cC3_WmHs9wt0YEqwkEhb1w9fEN0
"""

!pip install pingouin
!pip install lets-plot

import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from pathlib import Path
import pingouin as pg
from lets_plot import *

LetsPlot.setup_html(no_js=True)

"""#Part 2.1 Collecting Data by Playing

# Python walk-through 2.1
Plotting a line chart with multiple variables
Use the data from your own experiment to answer Question 1. As an example, we will use the data for the first three cities of the dataset that will be introduced in Part 2.2.
"""

from google.colab import files
uploaded = files.upload()
df = pd.read_excel("base_juego_taller4O.xlsx")

# Mostrar las primeras filas del DataFrame
df.head()

"""Now we need to plot the data. Note that, with data in ‘wide’ format (one column per city) and with an index, simply calling .plot on a pandas dataframe will create a matplotlib line chart. We could also use the lets_plot package to make this kind of chart, but it expects data in ‘tidy’ or ‘long’ format—and for that, we would have to reshape the data so that the city names were values in a single column called ‘city’ or similar. Let’s just use matplotlib for now."""

# Plot the data
fig, ax = plt.subplots()
df.plot(ax=ax)
ax.set_title("Average contributions to the public goods game: Without punishment")
ax.set_ylabel("Average contribution")
ax.set_xlabel("Round");

"""#Part 2.2 Describing de data

# Python walk-through 2.2
Importing the datafile into Python
Both the tables you need are in a single Excel worksheet. Note down the cell ranges of each table, in this case A2:Q12 for the without punishment data and A16:Q26 for the punishment data. We will use this range information to import the data into two dataframes (`data_n` and `data_p`, respectively).

In the code below, we’ll use the `.copy` method, which we’ll explain more about in a moment.
"""

from google.colab import files
uploaded = files.upload()

data_np = pd.read_excel(
    "doing-economics-datafile-working-in-excel-project-2.xlsx",
    usecols="A:Q",
    header=1,
    index_col="Period",
)
data_n = data_np.iloc[:10, :].copy()
data_p = data_np.iloc[14:24, :].copy()

"""When loading the data from Excel, you may see an error message about an ‘unknown extension’. Note that this particular Excel file has some issues that mean pandas will warn you about an ‘unknown extension’: an Excel file is actually a bundle of files tied up to look like one file, and what has happened here is that pandas doesn’t recognise one of the files in the bundle. Despite this issue, we can still import the data we need in the worksheets.

In the code above, we used `.copy` and you may be wondering what it does. When a new object (say, `data_p`) is created from an existing object (here `data_np`), programming languages have a few different options for how to do it. In this case, Python has two options: it could allocate some entirely new memory to store the new variable, `data_p`, or it could just create a link to the existing bit of memory where some of `data_np` is stored.

The two different approaches behave differently. Under the former, changes to `data_p` won’t affect data_np because `data_p` gets its own bit of memory and is entirely independent of the existing variable. But in the latter case, any changes to `data_p` will also be applied to data_np! This is because, underneath it all, they’re both ‘pointing’ to the same bit of computer memory. Indeed, that is why variables that do this are sometimes called pointers. They’re common to most programming languages and pandas tends to use them by default because they save on memory. This case is just an example of a situation where we don’t want to change `data_np` by changing `data_p`, so we use the `.copy` method to allocate new memory and avoid creating a pointer.
"""

test_data = {
    "City A": [14.1, 14.1, 13.7],
    "City B": [11.0, 12.6, 12.1],
}


# Original dataframe
test_df = pd.DataFrame.from_dict(test_data)
# A copy of the dataframe
test_copy = test_df.copy()
# A pointer to the dataframe
test_pointer = test_df


test_pointer.iloc[1, 1] = 99

"""Now, even though we only modified `test_pointer`, we can look at both the original data frame and the copy that we took earlier:"""

print("test_df=")
print(f"{test_df}\n")
print("test_copy=")
print(f"{test_copy}\n")

"""We see that test_df has changed because test_pointer pointed to it, but our pure copy, test_copy, hasn’t changed.

As well as importing the correct data, we’re going to ensure it is of the correct datatype. Common datatypes include ‘double’ and ‘integer’ (for numbers), string (for words), and ‘category’ (for variables that take on a fixed number of categories, like ethnicity or educational attainment). We can check the datatypes of the data we just read in using data_n.info() (you can do the same for data_p).
"""

data_n.info()

"""All of the columns are of the ‘object’ type, which is Python’s default when it’s not clear which datatype to use.

We have continuous real numbers in the columns of data_n and data_p here, so we’ll set the datatypes to be double, which is a datatype used for continuous real numbers.
"""

data_n = data_n.astype("double")
data_p = data_p.astype("double")

"""You can look at the data either by opening the dataframes from the Environment window or by typing data_n or data_p into the interactive Python window.

You can see that in each row, the average contribution varies across countries; in other words, there is a distribution of average contributions in each period.

The mean⁠ and variance⁠ are two ways to summarize distributions. We will now use these measures, along with other measures (range and standard deviation) to summarize and compare the distribution of contributions in both experiments.

2.2.1
Using the data for Figures 2A and 3 of Herrmann et al. (2008):

1.   Calculate the mean contribution in each period (row) separately for both experiments.
2.   Plot a line chart of mean contribution on the vertical axis and time period (from 1 to 10) on the horizontal axis (with a separate line for each experiment). Make sure the lines in the legend are clearly labelled according to the experiment (with punishment or without punishment).
3. Describe any differences and similarities you see in the mean contribution over time in both experiments.

# Python walk-through 2.3
Calculating the mean using the .mean() or the agg functions
We calculate the mean using two different methods to illustrate that there are usually many ways of achieving the same thing. We apply the first method on data_n, which uses the built-in .mean() function to calculate the average separately over each column except the first. We use the second method (the agg function) on data_p.
"""

mean_n_c = data_n.mean(axis=1)
mean_p_c = data_p.agg(np.mean, axis=1)

"""As the name suggests, the agg function applies an aggregation function (the mean function in this case) to all rows or columns in a dataframe. The second input, axis=1, applies the specified function to all rows in data_p, so we are taking the average over cities for each period.

Typing axis=0 would have calculated column means instead, that is, it would have averaged over periods to produce one value per city (run this code to see for yourself). Type help(pd.DataFrame.agg) in your interactive Python window for more details, or see Python walk-through 2.5 for further practice.

*Plot the mean contribution*

Now we will produce a line chart showing the mean contributions.
"""

fig, ax = plt.subplots()
mean_n_c.plot(ax=ax, label="Without punishment")
mean_p_c.plot(ax=ax, label="With punishment")
ax.set_title("Average contributions to the public goods game")
ax.set_ylabel("Average contribution")
ax.legend();

"""The difference between experiments is stark, as the contributions increase and then stabilise at around 13 in the case where there is punishment, but decrease consistently from around 11 to 4 across the rounds when there is no punishment.

2.2.2
Instead of looking at all periods, we can focus on contributions in the first and last period. Plot a column chart showing the mean contribution in the first and last period for both experiments. Your chart should look like Figure 2.3.

# Python walk-through 2.4
Drawing a column chart to compare two groups
To do this next part, we’re going to use something called a ‘list comprehension’, which is a special kind of loop. Loops are very useful in programming when you have the same task that you want to execute for a sequence of values. You could use a loop to find the squares of the first 10 numbers, for example.

A list comprehension is a way of writing a loop that creates a Python list. The loops it creates tend to be quick to run, too.

As a specific example, let’s say we wanted to add the first name ‘John’ to a list of names. Using a list comprehension, the code would be:
"""

partial_names_list = ["F. Kennedy", "Lennon", "Maynard Keynes", "Wayne"]
["John " + name for name in partial_names_list]

"""The second line shows the syntax: square bracket (which usually signifies a list), then an operation (here "John" + name), and then for name_of_thing in name_of_list (replace name_of_thing and name_of_list with the thing you would like to apply the loop to, and your list name).

To make a column chart, we will use the .plot.bar() function. We first extract the four data points we need (Periods 1 and 10, with and without punishment) and place them into another dataframe (called compare_grps).
"""

# Create new dataframe with bars in
compare_grps = pd.DataFrame(
    [mean_n_c.loc[[1, 10]], mean_p_c.loc[[1, 10]]],
    index=["Without punishment", "With punishment"],
)
# Rename columns to have 'round' in them
compare_grps.columns = ["Round " + str(i) for i in compare_grps.columns]
# Swap the column and index variables around with the transpose function, ready for plotting (.T is transpose)
compare_grps = compare_grps.T
# Make a bar chart
compare_grps.plot.bar(rot=0);

"""The mean is one useful measure of the ‘middle’ of a distribution, but is not a complete description of what our data looks like. We also need to know how ‘spread out’ the data is in order to get a clearer picture and make comparisons between distributions. The variance⁠ is one way to measure spread: the higher the variance, the more spread out the data is.

A similar measure is standard deviationstandard deviation A measure of dispersion in a frequency distribution, equal to the square root of the variance. The standard deviation has a similar interpretation to the variance. A larger standard deviation means that the data is more spread out.Example: The set of numbers 1, 1, 1 has a standard deviation of zero (no variation or spread), while the set of numbers 1, 1, 999 has a standard deviation of 46.7 (large spread).close⁠, which is the square root of the variance and is commonly used because there is a handy rule of thumb for large datasets, which is that most of the data (95%, if there are many observations) will be less than two standard deviations away from the mean.

2.2.3
Using the data for Figures 2A and 3 of Herrmann et al. (2008):
Calculate the standard deviation for Periods 1 and 10 separately, for both experiments. Does the rule of thumb apply? (In other words, are most values within two standard deviations of the mean?)
As shown in Figure 2.3, the mean contribution for both experiments was 10.6 in Period 1. With reference to your standard deviation calculations, explain whether this means that the two sets of data are the same.

# Python walk-through 2.5
Calculating and understanding standard deviation
In order to calculate these standard deviations and variances, we will use the agg function, which we introduced in Python walk-through 2.3. As we saw, agg is a command that asks pandas to aggregate a set of rows or columns of the dataframe using a particular aggregation function. The basic structure is as follows: dataframe_name.agg([function1, function2, ...], rows/columns). So to calculate the variances and more, we use the following command:
"""

n_c = data_n.agg(["std", "var", "mean"], 1)
n_c

"""Here we take data_n and apply the "var" and "std" functions to each row (recall that the second input 1 does this; 0 would indicate columns). Note that the index column, which contains the period numbers, is automatically excluded from the calculation. The result is saved as a new variable called n_c.

We then apply the same principle to the data_p dataframe.
"""

p_c = data_p.agg(["std", "var", "mean"], 1)

"""To determine whether 95% of the observations fall within two standard deviations of the mean, we can use a line chart. As we have 16 countries in every period, we would expect about one observation (0.05 × 16 = 0.8) to fall outside this interval."""

fig, ax = plt.subplots()
n_c["mean"].plot(ax=ax, label="mean")
# mean + 2 standard deviations
(n_c["mean"] + 2 * n_c["std"]).plot(ax=ax, ylim=(0, None), color="red", label="±2 s.d.")
# mean - 2 standard deviations
(n_c["mean"] - 2 * n_c["std"]).plot(ax=ax, ylim=(0, None), color="red", label="")
for i in range(len(data_n.columns)):
    ax.scatter(x=data_n.index, y=data_n.iloc[:, i], color="k", alpha=0.3)
ax.legend()
ax.set_ylabel("Average contribution")
ax.set_title("Contribution to public goods game without punishment")
plt.show();

"""None of the observations fall outside the mean ± two standard deviations interval for the public goods game without punishment. Let’s plot the equivalent chart for the version with punishment."""

fig, ax = plt.subplots()
p_c["mean"].plot(ax=ax, label="mean")
# mean + 2 sd
(p_c["mean"] + 2 * p_c["std"]).plot(ax=ax, ylim=(0, None), color="red", label="±2 s.d.")
# mean - 2 sd
(p_c["mean"] - 2 * p_c["std"]).plot(ax=ax, ylim=(0, None), color="red", label="")
for i in range(len(data_p.columns)):
    ax.scatter(x=data_p.index, y=data_p.iloc[:, i], color="k", alpha=0.3)
ax.legend()
ax.set_ylabel("Average contribution")
ax.set_title("Contribution to public goods game with punishment")
plt.show();

"""Here, we only have one observation outside the interval (in Period 8). In that aspect the two experiments look similar. However, from comparing these two charts, the game with punishment displays a greater variation of responses than the game without punishment. In other words, there is a larger standard deviation and variance for the observations coming from the game with punishment.

Another measure of spread is the rangerange The interval formed by the smallest (minimum) and the largest (maximum) value of a particular variable. The range shows the two most extreme values in the distribution, and can be used to check whether there are any outliers in the data. (Outliers are a few observations in the data that are very different from the rest of the observations.)close⁠, which is the interval formed by the smallest (minimum) and the largest (maximum) values of a particular variable. For example, we might say that the number of periods in the public goods experiment ranges from 1 to 10. Once we know the most extreme values in our dataset, we have a better picture of what our data looks like.

2.2.4
Calculate the maximum and minimum value for Periods 1 and 10 separately, for both experiments.

# Python walk-through 2.6
Finding the minimum, maximum, and range of a variable
We’re now going to see one of our first functions. A function takes inputs, does some operations on them, and returns outputs.

You can imagine functions as vending machines: for them to work you need some inputs (money, and a choice of snack or drink), then an operation happens (your drink or snack is dropped into the tray), and finally there is an output (your drink or snack as you grab it).

Functions are incredibly useful in programming because they are separate units that can be tested in isolation, re-used, and given helpful ‘dressing’ (such as information on how they work) that make code more readable.

To calculate the range for both experiments and for all periods, we will use an apply method in combination with the max and min methods that apply to a column or row. We’ll also use a lambda function to bring these all together. In our case, it’s going to look like this:
"""

data_p.apply(lambda x: x.max() - x.min(), axis=1)

"""This lambda function tells Python to take the difference between the maximum and minimum of each row.

A lambda function is an idea in programming (and mathematics) that has a long and interesting history. You don’t need to know all that, but it is instructive to look at a more general example of a lambda function:
"""

# A lambda function accepting three inputs, a, b, and c, and calculating the sum of the squares
test_function = lambda a, b, c: a**2 + b**2 + c**2


# Now we apply the function by handing over (in parenthesis) the following inputs: a=3, b=4 and c=5
test_function(3, 4, 5)

"""Above, we defined a lambda function that looked like lambda x: x.max() - x.min(). It accepts one input, x (which could be a row or column), and returns the range of x. Because making code reusable is good programming practice, we will define this function and give it a name using a separate line of code like this:"""

range_function = lambda x: x.max() - x.min()

"""When we call data_p.apply(range_function, axis=1), the following will happen: data_p contains the experimental data (with punishment). We will apply the range_function to that data. As data_p has two dimensions, we also need to let Python know over which dimension it should calculate the minimum and maximum. The axis=1 option in the apply function tells the apply function that it should apply the range_function over rows rather than columns (to get columns, it would be axis=0, which is also the default if you don’t specify the axis keyword argument)."""

range_function = lambda x: x.max() - x.min()
range_p = data_p.apply(range_function, axis=1)
range_n = data_n.apply(range_function, axis=1)

"""Let’s create a chart of the ranges for both experiments for all periods in order to compare them."""

fig, ax = plt.subplots()
range_p.plot(ax=ax, label="With punishment")
range_n.plot(ax=ax, label="Without punishment")
ax.set_ylim(0, None)
ax.legend()
ax.set_title("Range of contributions to the public goods game")
plt.show();

"""This chart confirms what we found in Python walk-through 2.5, which is that there is a greater spread (variation) of contributions in the game with punishment.

2.2.5
A concise way to describe the data is in a summary table. With just four numbers (mean, standard deviation, minimum value, maximum value), we can get a general idea of what the data looks like.

a) Create a table of summary statistics that displays mean, variance, standard deviation, minimum, maximum and range for Periods 1 and 10 and for both experiments.

b) Comment on any similarities and differences in the distributions, both across time and across experiments.

# Python walk-through 2.7
Creating a table of summary statistics
We have already done most of the work for creating this summary table in Python walk-through 2.6. Since we also want to display the minimum and maximum values, we should create these too. And it’s convenient to add in std and mean using the same syntax (even though we created a separate mean earlier), so we have all the information in one place. We’ll call our new summary statistics summ_p and summ_n.
"""

funcs_to_apply = [range_function, "max", "min", "std", "mean"]
summ_p = data_p.apply(funcs_to_apply, axis=1).rename(columns={"<lambda>": "range"})
summ_n = data_n.apply(funcs_to_apply, axis=1).rename(columns={"<lambda>": "range"})

"""Note that as well as applying all of the functions in the list funcs_to_apply, we also renamed the first function using the rename method. Because the range isn’t a built-in aggregation function and we defined it, it is automatically given a column name—and because the range function we supplied is a lambda function, the name it gets is "<lambda>". Using rename(columns=, we change this name to "range" using a dictionary object ({ : }) that maps the old name to the new name.

Now we display the summary statistics in a table. We use the round method, which reduces the number of digits displayed after the decimal point (2 in our case) and makes the table easier to read. We’re only interested in periods 1 and 10, so we pass a list, [1, 10], to the .loc selector in the first position (which corresponds to rows and the index). We want all columns, so we pass : to the second position of the .loc selector.
"""

summ_n.loc[[1, 10], :].round(2)

summ_p.loc[[1, 10], :].round(2)

"""# Part 2.3 How did changing the rules of the game affect behavior?

By comparing the results in Period 10 of both experiments, we can see that the mean contribution in the experiment with punishment is 8.5 units higher than in the experiment without punishment (see Figure 2.6 in Part 2.2). Is it more likely that this behaviour is due to chance, or is it more likely to be due to the difference in experimental conditions?

2.3.1
You can conduct another experiment to understand why we might see differences in behaviour that are due to chance.

a) First, flip a coin six times, using one hand only, and record the results (for example, Heads, Heads, Tails, etc.). Then, using the same hand, flip a coin six times and record the results again.

b) Compare the outcomes from Question 1(a). Did you get the same number of heads in both cases? Even if you did, was the sequence of the outcomes (for example, Heads, Tails, Tails …) the same in both cases?

2.3.2 Using the data for Figures 2A and 3:

a) Use the ttest function to calculate the p-value for the difference in means in Period 1 (with and without punishment).

b) What does this p-value tell us about the difference in means in Period 1?

# Python walk-through 2.8
Calculating the p-value for the difference in means
We need to extract the observations in Period 1 for the data for with and without punishment, and then feed the observations into a function that performs a t-test. We’ll use the statistics package pingouin for this, which you will need to install on the command line using pip install pingouin. Once installed, import it using import pingouin as pg, just like we did at the start of the project.

Tip: you can open up the command line, also known as the terminal or command prompt, in order to install packages in multiple ways. If you’re working within Visual Studio Code use the ⌃ + \` keyboard shortcut (Mac) or CTRL + \` (Windows and Linux), or click ‘View > Terminal’. If you want to open up the command line independently of Visual Studio Code, search for ‘Terminal’ on Mac and Linux, and ‘Anaconda Prompt’ on Windows.

pingouin’s t-test function is called ttest. The ttest function is extremely flexible: if you input two variables (x and y) as shown below, it will automatically test whether the difference in means is likely to be due to chance or not (formally speaking, it tests the null hypothesis that the means of both variables are equal).

Note that the ttest function will only accept one series of data, not multiple data series. By subsetting (iloc[1, :]), we are passing in the 0th row (the first period) for all columns (cities).
"""

pg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :])

"""Note that as well as the t-statistic (T), the p-value (p-val), the degrees of freedom (dof), the alternative hypothesis (two-sided) and the confidence interval (CI95%), we get some other variables that help us put the main results into context.

This result delivers a p-value of 0.9496. This means it is very likely that the assumption that there are no differences in the populations is likely to be true (formally speaking, we cannot reject the null hypothesis).

The ttest function automatically assumes that both variables were generated by different groups of people. When calculating the p-value, it assumes that the observed differences are partly due to some variation in characteristics between these two groups, and not just the differences in experimental conditions. However, in this case, the same groups of people did both experiments, so there will not be any variation in characteristics between the groups. When calculating the p-value, we account for this fact with the paired=True option.
"""

pg.ttest(x=data_n.iloc[0, :], y=data_p.iloc[0, :], paired=True)

"""The p-value becomes smaller as we can attribute more of the differences to the ‘with punishment’ treatment, but the p-value is still very large (0.8828), so we still conclude that the differences in Period 1 are likely to be due to chance.

2.3.3 Using the data for Period 10:

a) Use the ttest function to calculate the p-value for the difference in means in Period 10 (with and without punishment).

b) What does this p-value tell us about the relationship between punishment, and behaviour in the public goods game?

c) With reference to Figure 2.7 and Figure 2.8, explain why we cannot use the size of the difference to directly conclude whether the difference could be due to chance.

2.3.4 Refer to the results from the public goods games.
a) Which characteristics of the experimental setting make it likely that the with punishment option was the cause of the change in behaviour?

b) Using Figure 2.6, explain why we need to compare the two groups in Period 1 in order to conclude that there is a causal link between the with punishment option and behaviour in the game.

Experiments can be useful for identifying causal links. However, if people’s behaviour in experimental conditions were different from their behaviour in the real world, our results would not be applicable anywhere outside the experiment.

2.3.5 Discuss some limitations of experiments, and suggest some ways to address (or partially address) them. (You may find pages 158–171 of the paper ‘What do laboratory experiments measuring social preferences reveal about the real world?’ helpful, as well as the discussion on free riding and altruism in Section 2.6 of Economy, Society, and Public Policy.)
"""